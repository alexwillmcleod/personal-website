---
import Picture from 'astro/components/Picture.astro';
import type Article from '../../interfaces/article';
import fetchApi from '../../lib/strapi';
import { Image, getImage } from 'astro:assets';
import BaseHead from '../../components/BaseHead.astro';
import Layout from '../../layouts/layout.astro';
import Authors from '../../components/Authors.astro';
import { marked } from 'marked';
import  markedShiki  from 'marked-shiki';
import { codeToHtml } from 'shiki';
import './styles.css';

export async function getStaticPaths() {
  const articles: Article[] = await fetchApi<Article[]>({
    endpoint: 'articles?populate=deep,3',
    wrappedByKey: 'data'
  });

  return articles.map((article) => ({
    params: {
      slug: article.attributes.slug
    },
    props: article
  }));
	
}
type Props = Article;

const article = Astro.props;
const content = await marked.use(
  markedShiki({
    async highlight(code, lang) {
      return await codeToHtml(code, { lang, theme: 'one-dark-pro' })
    },
    container: `<figure class="highlighted-code" style="overflow: hidden;">
%s
</figure>
`,
  })).parse(article.attributes.content);

const coverImageURL: string | undefined = article.attributes.image?.data.attributes.url;
---
<Layout title={article.attributes.title} description={article.attributes.description}>
    <main class="w-full flex flex-col items-center overflow-x-hidden">
      <div class="w-full md:max-w-screen-md px-10 flex-col flex gap-8">
      <!-- <img src={import.meta.env.STRAPI_URL + article.attributes.image.data.attributes.url} /> -->
     
      {coverImageURL && <Picture width={1080} inferSize decoding="async" class="h-48 md:h-96 w-full rounded-xl object-cover" src={coverImageURL} alt={article.attributes.title}/>}
      
      <div class="w-full flex flex-col gap-4">
        <div class="w-full flex flex-col gap-4 md:flex-row justify-between">
          <h1 class="font-display font-black text-display text-3xl w-1/2">{article.attributes.title}</h1>
          <h3 class="font-display text-display text-xl">{new Date(article.attributes.publishedAt).toDateString()}</h3>
        </div>
        <div>
        <Authors authors={article.attributes?.authors.map((element) => ({
                name: element.name,
                profileIcon: element.avatar
              }))}/>
              </div>
      </div>
      <!-- Render markdown -->
      <div class="text-lg rounded-md">
        <div class="rounded-md">
          <article set:html={content} class="flex flex-col gap-2"/>
        </div>
      </div>
    </div>
    </main>
</Layout>